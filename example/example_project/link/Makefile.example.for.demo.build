SHELL = /bin/bash
PACKER = ../packer/dali/dali
D64WRITE = ../d64write/d64write
X64 = x64
MAKE_FLAGS = RELEASE=1
PACKER_OPTS =

.PHONY: all vice vice

#Build all
all: bitfire image1.d64 image2.d64

#Build bitfire and tools
#Build all and launch side 1
vice: all
	$(X64) -pal -autostart "image1.d64:*" -truedrive -model c64c

#Build and launch side 1 only
vice1: image1.d64
	$(X64) -pal -autostart "image1.d64:*" -truedrive -model c64c

#Build and launch side 2 only
vice2: image2.d64
	$(X64) -pal -autostart "image2.d64:*" -truedrive -model c64c

image1.d64: mydemo bootstrap1.prg music1.prg scroller.prg vector.prg note.prg
	$(D64WRITE) -c $@ -h oxyron -i rules --side 1 \
				--boot mydemo \
				-b bootstrap1.prg \
				-b music1.prg \
				-b scroller.prg \
				-b vector1.prg \
				-b vector2.prg \
				-s note.prg

image2.d64: mydemo bootstrap2.prg
	$(D64WRITE) -c $@ -h oxyron -i rules --side 2 \
				--boot mydemo \
				-b bootstrap2.prg

##################### BOOTLOADER - GENERIC STUFF ##############

#The bootloader with installer
../installer/installer: FORCE
	$(MAKE) -C $(dir $@) $(MAKE_FLAGS)
mydemo: ../installer/installer
	$(PACKER) --sfx 0x0900 -o $@ $<

#A note file written as standard file
../parts/note/note: FORCE
	$(MAKE) -C $(dir $@) $(MAKE_FLAGS)
note.prg: ./parts/note/note
	$(PACKER) --sfx 0x4000 -o $@ $<

##################### SIDE 1 ##################################

#The bootstrap for each side, see the SIDE param
../bootstrap/bootstrap1: FORCE
	$(MAKE) -C $(dir $@) $(MAKE_FLAGS) $(notdir $@) link_exit=8192 SIDE=1
bootstrap1.prg: ../bootstrap/bootstrap1
	$(PACKER) $(PACKER_OPTS) -o $@ $<

#Music to be loaded. Just packing is sufficient here
music1.prg: ../music/funkyshit.prg
	$(PACKER) $(PACKER_OPTS) -o $@ $<

#Build first part
../parts/scroller/scroller: FORCE
	#build part in its own dir with an own Makefile
	$(MAKE) -C $(dir $@) $(MAKE_FLAGS) link_exit=8192
#And pack it. This is separated from building to only pack again if the part really changed
scroller.prg: ../parts/scroller/scroller
	#part in a single file, as it can be laoded in one go
	$(PACKER) $(PACKER_OPTS) -o $@ $<

#A second part that we split upon packing.
../parts/vector/vector: FORCE
	#build part in its own dir with an own Makefile
	make -C ($dir $@) $(MAKE_FLAGS) link_exit=8192
#Generates two files, as it is splitted to be loaded under IO, but also if mem is still occupied and things need to be loaded bit by bit
vector.prg: ../parts/vector/vector
	$(PACKER) $(PACKER_OPTS) -o $(basename $@)1.prg --from 0x2000 --to 0xcff0 $<
	$(PACKER) $(PACKER_OPTS) -o $(basename $@)2.prg --use-prefix --from 0xcff0 --to 0xfff8 $<

##################### SIDE 2 ##################################

#The bootstrap for each side, see the SIDE param
../bootstrap/bootstrap2: FORCE
	$(MAKE) -C $(dir $@) $(MAKE_FLAGS) $(notdir $@) link_exit=8192 SIDE=1
bootstrap2.prg: ./bootstrap/bootstrap2
	$(PACKER) $(PACKER_OPTS) -o $@ $<

##################### CLEANUP #################################

clean: clean_framework
	-rm *.prg *.d64
	-rm mydemo

###############################################################

#Always returns true so that Make always has a peek into each subdir to take notice of changes so tha twe recompile parts in case
FORCE:
